 Binary Tree Maximum Path Sum

Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

Solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }a
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    int sum ;
    
    public int maxPathSum(TreeNode root) {
        sum = Integer.MIN_VALUE;
        pathsum(root);
        return sum;
        
    }
 
       public int pathsum(TreeNode root){
        if(root== null)return 0;
        int left  =Math.max(0,pathsum(root.left));
        int right  = Math.max(0,pathsum(root.right));
        sum = Math.max(sum,  left+right+root.val);
       return  Math.max(left,right)+root.val;
    }
}
